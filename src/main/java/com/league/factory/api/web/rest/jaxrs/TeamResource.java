/*
 * Created on 2017-10-13 ( Time 10:51:44 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */
package com.league.factory.api.web.rest.jaxrs;

import java.util.LinkedList;
import java.util.List;

import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

//--- Entities
import com.league.factory.api.data.record.TeamRecord;
import com.league.factory.api.data.record.listitem.TeamListItem;
//--- Services 
import com.league.factory.api.persistence.TeamPersistence;
// import com.league.factory.api.business.service.impl.TeamServiceImpl;
import com.league.factory.api.persistence.commons.PersistenceServiceProvider;
import com.league.factory.api.web.rest.commons.AbstractResourceController;

/**
 * JAXRS Jersey controller for 'Team' management.
 */
@Path("/team")
public class TeamResource extends AbstractResourceController {

	private TeamPersistence teamService = PersistenceServiceProvider.getService(TeamPersistence.class);

	/**
	 * Constructor
	 */
	public TeamResource() {
		super();
		logger.info("Constructor.");
	}

	/**
	 * Get all team entities.
	 * @return list with all entities found
	 */
	@GET
	@Produces({MediaType.APPLICATION_JSON})
	public List<TeamRecord> findAll() {
		logger.info("findAll()...");
		return teamService.findAll();
	}

	/**
	 * Retrieves a team using the given id.
	 * @param id id
	 * @return 200 + body if found, 404 if not found 
	 */
	@GET
	@Path("{id}")
	@Produces({MediaType.APPLICATION_JSON})
	public Response findById(@PathParam("id") long id) {
		logger.info("findById("+id+")...");
		TeamRecord record = teamService.findById(id);
		if ( record != null ) {
			return Response.ok(record).build();
		}
		else {
			return Response.status(Status.NOT_FOUND).build();
		}
	}

	/**
	 * Creates a new team.
	 * @param team team
	 * @return 201 with body if created, 409 conflict if duplicate key 
	 */	
	@POST
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	public Response create(TeamRecord team) {
		logger.info("create()...");
		if ( teamService.exists(team) ) {
			logger.info("create() : already exists -> conflict");
			return Response.status(Status.CONFLICT).build();
		}
		else {
			logger.info("create() : doesn't exist -> create");
			TeamRecord record = teamService.create(team);
			return Response.status(Status.CREATED).entity(record).build();
		}
	}

//------------------------------------------------------------
	/**
	 * Updates the team identified by the given id
	 * @param team team entity
	 * @param id id 
	 * @return 200 if found and updated, 404 if not found 
	 */	
	@PUT
	@Path("{id}")
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	// public TeamRecord update(TeamRecord team, @PathParam("id") long id) {
	public Response update(TeamRecord team, @PathParam("id") long id) {
		logger.info("update()...");
		// force the id (use the id provided by the URL)
		team.setId( id );
		boolean updated = teamService.update(team);
		if ( updated ) {
			// Actually updated (found and updated) => 200 OK
			return Response.status(Status.OK).build();
		}
		else {
			// Not updated with no error => 404 not found
			return Response.status(Status.NOT_FOUND).build();
		}
	}

	/**
	 * Save (create or update) the given team.
	 * @param team team entity
	 * @return 200 if found and updated, 201 if not found and created
	 */	
	@PUT
	@Consumes({MediaType.APPLICATION_JSON})
	@Produces({MediaType.APPLICATION_JSON})
	public Response save(TeamRecord team) {
		logger.info("save()...");
		Status status = Status.OK ; // 200 OK
		if ( ! teamService.exists(team) ) {
			status = Status.CREATED ; // 201 CREATED
		}
		TeamRecord record = teamService.save(team);
		// Response ( code 200 or 201 )
		return Response.status(status).entity(record).build();
	}


//------------------------------------------------------------
	/**
	 * Delete a team.
	 * @param id id
	 */
	@DELETE
	@Path("{id}")
	//@Consumes({MediaType.APPLICATION_JSON})
	// public void delete(@PathParam("id") long id) {
	public Response delete(@PathParam("id") long id) {
		logger.info("delete("+id+")...");
		// teamService.deleteById(id);
		boolean deleted = teamService.deleteById(id);
		if ( deleted ) {
			// Actually deleted (found and deleted) => 204 "No Content" because no body in the response 
			return Response.status(Status.NO_CONTENT).build();
		}
		else {
			// Not deleted with no error => 404 "Not found"
			return Response.status(Status.NOT_FOUND).build();
		}
}

	@GET
	@Path("/teams-list-items")
	@Produces({MediaType.APPLICATION_JSON})
	public List<TeamListItem> listItems() {
		logger.info("listItems()...");
		List<TeamRecord> list = teamService.findAll();
		List<TeamListItem> items = new LinkedList<TeamListItem>();
		for ( TeamRecord team : list ) {
			items.add(new TeamListItem( team ) );
		}
		return items;
	}

}
